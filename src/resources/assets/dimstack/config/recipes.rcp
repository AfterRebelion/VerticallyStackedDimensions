VERSION = 12;

{
	!Each array entry is a vector [a, b, ...]# containing dimension IDs that should be stacked on top of each other via portals (order bottom to top).
	linked_dimensions = [
		[-1, 0]#
	];
	
	!Custom terrain generation for the top half of the nether.
	Loc empty = -/0,		!ENUM: leave it empty (disable terrain gen).
		solidRock = 0,		!ENUM: fill it with nothing but solid stone.
		mirroredNether = 1,	!ENUM: fill it with a mirrored version of the regular nether that replaces netherrack with stone and lava with water.
		stoneVariation = 2;	!ENUM: include dirt, gravel and different stone variants.
	!The actual generation setting (may consist of multiple of the above values added together).
	gen_topNether = mirroredNether + stoneVariation; 
}

!Time in seconds to keep a chunk loaded after it was requested by a portal (set to 0 to disable chunk persistence).
!This is to avoid lagg by chunks being frequently loaded and unloaded again.
chunk_load_time = 30.0;
!maximum time in seconds a chunk can be kept continously loaded via portal requests without a player, spawnarea or modded chunkloader nearby.
!This is to prevent players from buiding exploit contraptions to keep chunks loaded indefinitely
cont_load_time = 300.0;

!set these to true to disable vanilla ore-generation in overworld and nether. 
disable_coal = false;
disable_diamond = true;!<-
disable_emerald = false;
disable_gold = false;
disable_iron = false;
disable_lapis = false;
disable_redstone = false;
disable_quartz = false;

INIT() {
	!replace bedrock layers
	!add("bedrockRepl", <dimId>, it(<repBlock>), [<minY>, <maxY>]#);
	add("bedrockRepl", 0, it("minecraft:stone"), [0, 5]#);
	add("bedrockRepl", -1, it("minecraft:obsidian"), [123, 128]#);
	
	if (gen_topNether >= 0) {
		!top nether ores
		!add("oregen", <dimId>, <repBlocks>, <veinsPerChunk>, <blocksPerVein> * it(<oreBlock>), <mode>, <heights>...);
		!The "even" mode takes a minimum and a maximum height and distributes ore veins evenly between them.
		!The "centered" mode takes a minimum, a center and a maximum height and distributes ore veins between minimum and maximum but with higher concentration towards the center height.
		!The "gaussian" mode takes a center height and a deviation distance and spreads ore veins with a Gaussian distribution.
		Loc stone = "minecraft:stone";
		add("oregen", -1, stone,  3,  8 * it("minecraft:diamond_ore"),  "centered", [128, 144, 240]#);
		add("oregen", -1, stone, 24,  8 * it("minecraft:redstone_ore"), "centered", [144, 160, 256]#);
		add("oregen", -1, stone,  4,  7 * it("minecraft:lapis_ore"),    "centered", [144, 240, 256]#);
		add("oregen", -1, stone,  6,  9 * it("minecraft:gold_ore"),     "centered", [128, 176, 256]#);
		add("oregen", -1, stone, 40,  9 * it("minecraft:iron_ore"),     "even", [128, 256]#);
		add("oregen", -1, stone, 50, 17 * it("minecraft:coal_ore"),     "even", [128, 256]#);
		
		!modded ores: these are generated only if other mods have added ore blocks for them into OreDictionary
		if (ore("oreCopper"))    {add("oregen", -1, stone, 20, 9 * it("ore:oreCopper"),    "centered", [192, 216, 256]#);}
		if (ore("oreTin"))       {add("oregen", -1, stone, 16, 9 * it("ore:oreTin"),       "centered", [192, 232, 256]#);}
		if (ore("oreAluminium")) {add("oregen", -1, stone, 16, 8 * it("ore:oreAluminium"), "centered", [176, 192, 256]#);}
		if (ore("oreNickel"))    {add("oregen", -1, stone,  6, 9 * it("ore:oreNickel"),    "centered", [144, 160, 256]#);}
		if (ore("oreSilver"))    {add("oregen", -1, stone,  8, 9 * it("ore:oreSilver"),    "centered", [128, 176, 256]#);}
		if (ore("oreLead"))      {add("oregen", -1, stone,  8, 9 * it("ore:oreLead"),      "centered", [128, 144, 192]#);}
		if (ore("orePlatinum"))  {add("oregen", -1, stone,  4, 7 * it("ore:orePlatinum"),  "centered", [128, 136, 144]#);}
		if (ore("oreUranium"))   {add("oregen", -1, stone,  6, 7 * it("ore:oreUranium"),   "centered", [128, 140, 160]#);}
	}
	
	!shaped crafting recipes
	!add("shaped", <result>, <pattern>, <ingredients>...);
	add("shaped", it("tile.dim_pipe", 1), "010/020/010", "obsidian", "gemQuartz", it("minecraft:hopper"));
}
