VERSION = 17;

!Time in seconds to keep a chunk loaded after it was requested by a portal (set to 0 to disable chunk persistence).
!This is to avoid lagg by chunks being frequently loaded and unloaded again.
chunk_load_time = 30.0;
!maximum time in seconds a chunk can be kept continously loaded via portal requests without a player, spawnarea or modded chunkloader nearby.
!This is to prevent players from buiding exploit contraptions to keep chunks loaded indefinitely
cont_load_time = 300.0;

!set these to true to disable vanilla ore-generation in overworld and nether. 
disable_coal = false;
disable_diamond = true;!<-
disable_emerald = false;
disable_gold = false;
disable_iron = false;
disable_lapis = false;
disable_redstone = false;
disable_quartz = false;

{	
	!nubers of octaves for global noise generators, used for add("noiseField" ...)
	custom_noise_octaves = []#;
}

PRE_INIT() {
	!stacking dimensions on top of each other so they get connected via portals (order bottom to top):
	!add("dimstack", [<dimId>...]#);
	add("dimstack", [-1, 0]#); !overworld on top of nether
}

INIT() {
	!shaped crafting recipes
	!add("shaped", <result>, <pattern>, <ingredients>...);
	add("shaped", it("tile.dim_pipe", 1), "010/020/010", "obsidian", "gemQuartz", it("minecraft:hopper"));
	
	!replace bedrock layers
	!add("bedrockRepl", <dimId>, it(<repBlock>), [<minY>, <maxY>]#);
	add("bedrockRepl", 0, "minecraft:stone", [0, 5]#); !overworld bedrock layer
	
	netherTop(); !remove/comment this line to disable all nether related features
}

netherTop() {
	!Quick configuration options:
	Loc stoneNether = true, !should the top nether be out of stone instead of netherrack
		fullSolid = false, !should the top nether be completely filled instead of giant cave terrain
		stoneVariants = true, !should veins of dirt, gravel and stone variants be generated
		overworldOres = true, !should overworld ores be generated
		netherOres = false; !should nether ores be generated
	
	Loc rock, liquid, sand1Bot, sand1Top, sand2Bot, sand2Top; !the materials to generate the nether out of
	if (stoneNether) {
		rock = "minecraft:stone";
		liquid = "minecraft:water";
		sand1Top = "minecraft:sand";
		sand1Bot = "minecraft:sandstone";
	} else {
		rock = "minecraft:netherrack";
		liquid = "minecraft:lava";
		sand1Bot = "minecraft:soul_sand";
		sand1Top = sand1Bot;
	}
	sand2Bot = rock;
	sand2Top = "minecraft:gravel";
	
	!terrain generation:
	if (fullSolid) {
		!fill everything with base material
		!add("basicLayer", <dimId>, <blockstate>, [<minY>, <maxY>]#);
		add("basicLayer", -1, rock, [128, 256]#);
	} else {
		!generate nether terrain
		!add("nether", <dimId>, [<materials>...], [minY, lakeY, sandFormY, maxY]#, <borderSize>);
		add("nether", -1, [rock, liquid, sand1Bot, sand1Top, sand2Bot, sand2Top], [128, 160, 192, 256]#, 32);
	}
	!obsidian layer between top and bottom nether
	add("basicLayer", -1, "minecraft:obsidian", [128, 128, 129, 133]#);
	!replace upper bedrock layer with obsidian as well
	add("bedrockRepl", -1, "minecraft:obsidian", [123, 128]#);
	
	!ore vein generation:
	if (stoneVariants) {
		add("oregen", -1, rock, 10, 33, "minecraft:dirt", "even", [128, 256]#);
		add("oregen", -1, rock, 8, 33, "minecraft:gravel", "even", [128, 256]#);
		add("oregen", -1, rock, 10, 33, "minecraft:stone@1", "even", [128, 256]#);
		add("oregen", -1, rock, 10, 33, "minecraft:stone@3", "even", [128, 256]#);
		add("oregen", -1, rock, 10, 33, "minecraft:stone@5", "even", [128, 256]#);
	}
	if (overworldOres) {
		!ore generation
		!add("oregen", <dimId>, <repBlocks>, <veinsPerChunk>, <blocksPerVein> * it(<oreBlock>), <mode>, <heights>...);
		!The "even" mode takes a minimum and a maximum height and distributes ore veins evenly between them.
		!The "centered" mode takes a minimum, a center and a maximum height and distributes ore veins between minimum and maximum but with higher concentration towards the center height.
		!The "gaussian" mode takes a center height and a deviation distance and spreads ore veins with a Gaussian distribution.
		add("oregen", -1, rock,  3,  8, "minecraft:diamond_ore",  "center", [128, 144, 240]#);
		add("oregen", -1, rock, 24,  8, "minecraft:redstone_ore", "center", [144, 160, 256]#);
		add("oregen", -1, rock,  4,  7, "minecraft:lapis_ore",    "center", [144, 240, 256]#);
		add("oregen", -1, rock,  6,  9, "minecraft:gold_ore",     "center", [128, 176, 256]#);
		add("oregen", -1, rock, 40,  9, "minecraft:iron_ore",     "even", [128, 256]#);
		add("oregen", -1, rock, 50, 17, "minecraft:coal_ore",     "even", [128, 256]#);
		
		!modded ores: these are generated only if other mods have added ore blocks for them into OreDictionary
		if (ore("oreCopper"))    {add("oregen", -1, rock, 20, 9, "ore:oreCopper",    "center", [192, 216, 256]#);}
		if (ore("oreTin"))       {add("oregen", -1, rock, 16, 9, "ore:oreTin",       "center", [192, 232, 256]#);}
		if (ore("oreAluminium")) {add("oregen", -1, rock, 16, 8, "ore:oreAluminium", "center", [176, 192, 256]#);}
		if (ore("oreNickel"))    {add("oregen", -1, rock,  6, 9, "ore:oreNickel",    "center", [144, 160, 256]#);}
		if (ore("oreSilver"))    {add("oregen", -1, rock,  8, 9, "ore:oreSilver",    "center", [128, 176, 256]#);}
		if (ore("oreLead"))      {add("oregen", -1, rock,  8, 9, "ore:oreLead",      "center", [128, 144, 192]#);}
		if (ore("orePlatinum"))  {add("oregen", -1, rock,  4, 7, "ore:orePlatinum",  "center", [128, 136, 144]#);}
		if (ore("oreUranium"))   {add("oregen", -1, rock,  6, 7, "ore:oreUranium",   "center", [128, 140, 160]#);}
	}
	if (netherOres) {
		add("oregen", -1, rock, 40,  9, "minecraft:quartz_ore", "even", [128, 256]#);
	}
}